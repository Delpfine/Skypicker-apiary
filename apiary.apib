FORMAT: 1A
HOST: https://api.skypicker.com

# Skypicker.com API
Skypicker.com flights search API.

The default api endpoint is api.skypicker.com . You have to use https, always.
Currently, SLLv3 is disabled. Use TLS 1, 1.1 or 1.2 in your client config, if you get a handshake error response.

To implement the basic search, you need only the /places and /flights API calls.

To implement also the booking API, you need to use the booking_token hash containing all the needed flights data and pass it as parameters to check flights and also to save booking calls.

The places call contains the list of Skypicker API IDs, which are accepted by the /flights call in the flyFrom and to parameters. Basically, the IDs are the IATA airport and ISO country codes, 
but Skypicker uses also its own IDs as the engine can do very specific searches (currently anywhere and there could be other geo areas specified - "To the sea", "To party places" etc)

# Partner implementation notes

Use the parameter partner=picky for testing your implementation. Before going live, your account manager will assign your custom partner ID to you.

There is no development API, as most of the queries are simple GET requests that are not changing the state of any resource (except save_booking).
Feel free to use api.skypicker.com for the implementation and also testing.

Currently, all of our flights are economy class. We consider for now each passenger as an adult.

# How it works
For every search the rules are the same. Except deeplink! How **deeplink** works - scroll down.

1. Always **start with** https://api.skypicker.com/

2. Choose **one specific call** from list below (places, flights, flights_multi, check_flights, save_booking, paymill_payment, zooz_payment, watchdog), 
e.g. https://api.skypicker.com/places

3. For **specific searches** and filters use " **?** " after chosen call, e.g. /places?
Then **choose parameters** from specific call list, where every available parameter is described. 
Choose one of them and use it in exact form with " **=** ". Then **set a value** of the parameter,  e.g. https://api.skypicker.com/places?term=br
So term is used for suggestions of geo names and "br" returns city, airport codes or country names beginning with br.

You may want to **combine** more parameters, then always put " **&** " to separate them, e.g. https://api.skypicker.com/places?term=br&locale=cs
Now we have all geo names beginning with br in Czech language.

Some of the parameters are **mandatory** for use in specific calls. Check it in **Details** column of every parameter, 
e.g. in **flights search** parameters flyFrom, to, dateFrom and dateTo are required https://api.skypicker.com/flights?flyFrom=PRG&to=OPO&dateFrom=01/06/2015&dateTo=30/06/2015 
We get all flights from Prague to Porto, from Jun 6, 2015 until Jun 30, 2015

Correct date format is **dd/mm/YYYY**, e.g. 29/05/2015. 


#### Places
The basic places call is this

https://api.skypicker.com/places

#### Search
The basic flights call could look like this

https://api.skypicker.com/flights?flyFrom=CZ&to=OPO&dateFrom=10/10/2014&dateTo=20/10/2014&partner=picky

If there is the partner parameter specified, the response will contain the link directly to Skypicker booking, where user can book the specified flight.

For more specific searches and filters continue to this apiary specification, where every available parameter is described.


# GET /places{/id,?term,?locale, ?zoomLevelThreshold, ?bounds,?v}

Returns the list of Skypicker api ids. This ids has to be used in the SP search (flights API call)
From v2 (May 2014) flights also accepts parameters for city areas (LON,PAR...), even if they dont appear in the places call

+ Parameters
    + id = `SK` (optional, string) ... if given, the call returns the details only for the one specific id
    + term = `br` (optional, string) ... used for suggestions of geo names,"br" returns city, airport codes or country names beginning with br
    + locale = `cs` (optional, string) ... the locale of geo names in response, default is en
    + zoomLevelThreshold = `3` (optional, integer) ... zoom level on which this place should be shown
    + bounds = `lat_lo,lng_lo,lat_hi,lng_hi` (optional, string) ... filter only places in these bounds. "lo" corresponds to the southwest corner of the bounding box, "hi" corresponds to the northeast corner of that box
    + v = `1` (optional, integer)  ... the api version, from v2 it returns the new api ids for the whole world.

+ Request
    { "term":"BRQ" }

+ Response 200
    {
        "zoomLevelThreshold": 7,
        "numberOfAirports": 1,
        "sp_score": null,
        "value": "Brno",
        "rank": 8,
        "parentId": 1,
        "lat": 49.1952,
        "lng": 16.608,
        "type": 0,
        "id": "BRQ"
    }


# GET /flights{flyFrom,to,datefrom,dateto,?longitudeFrom,?latitudeFrom,?radiusFrom,?longitudeFrom,?longitudeTo,?latitudeTo,?radiusTo,?daysInDestinationFrom,?daysInDestinationTo,?returnFrom,?returnTo,?typeFlight,?passengers,?flyDays,?oneforcity,?onlyWorkingDays,?onlyWeekends,?directFlights,?locale,?partner,?limit,?offset}

A single flights search.

The google flights like filters (price_from,price_to and the next ones) are not well documented and even not tested for properly functioning, yet. 

+ Parameters

    + flyFrom (required, string,`CZ`) ... Skypicker api id of the departure destination. Can also accept a list of airport codes separated by a comma for multicity search. E.g. BRQ,PRG,BTS,BUD
    + to (required, string, `porto`) ... Skypicker api id of the arrival destination. Can also accept a list of airport codes separated by a comma for multicity search. E.g. BRQ,PRG,BTS,BUD
    + dateFrom (required, string,`08/02/2014`) ... search flights from this date (dd/mm/YYYY). **Use parameters dateFrom and dateTo as a daterange for the flight departure.**
        Parameter dateFrom 01/05/2014 and dateTo 30/05/2014 means, that the departure can be anytime between those dates.
        For the dates of the return flights, use the returnTo&returnFrom or daysInDestinationFrom & daysInDestinationTo parameters
    + dateTo (required, string,`08/03/2014`) ... search flights until this date (dd/mm/YYYY)

    + longitudeFrom = `14.0000` (optional, float) ... longitude of the pinpoint for geo based search, for the departure destination
    + latitudeFrom = `50.2000` (optional, float) ... lat of the pinpoint for geo based search, fot the departure destination
    + radiusFrom = `200` (optional, integer) ... search radius in km, max 250
        (radiusFrom works only with longitudeFrom and latitudeFrom. In this case, the **flyFrom** parameter is ignored)
        
    + longitudeTo = `14.0000` (optional, float) ... longitude of the pinpoint for geo based, for the arrival destination
    + latitudeTo = `50.2000` (optional, float) ... lat of the pinpoint for geo based search, for the arrival destination
    + radiusTo = `200` (optional, integer) ... search radius in km, max 250
        (radiusTo works only with longitudeTo and latitudeTo. In this case, the **to** parameter is ignored)
    
    + daysInDestinationFrom = `2` (optional, integer) ... the minimal length of stay in the destination given in the **to** parameter
    + daysInDestinationTo = `14` (optional, integer) ... the max length of stay in the destination given in the **to** parameter
        (use only one from the daysInDestination and returnFrom/returnTo parameters. If both of them are given, the API uses the daysInDest parameters
        and the return dates are ignored)
    
    + returnFrom = `08/03/2014` (optional, string) ... min return of the whole trip (dd/mm/YYYY)
    + returnTo = `08/04/2014` (optional, string) ... max return date of the whole trip (dd/mm/YYYY)
    
    + typeFlight = `oneway` (optional, string) ... switch for oneway/round flights search - will be deprecated in the near future
        (until then, you have to use the round parameter if one from the daysInDestination of returndate parameters is given.)
        
        + Values
            + `round`
            + `oneway`
            
    
    + oneforcity = `0` (optional, boolean) ... filters out the cheapest flights to every city covered by the **to** parameter
    
    + passengers = `1` (optional, integer) ... number of passengers. Default for defining the num of passengers.
    
    + adults = `0` (optional, integer) ... To specify number of childs, and infants, you can use adults&children&infants parameters. You have to specify all of those 3 parameters, otherwise the parameter passengers will be used. However, currently childs&infants are considered as adults in our search engine
    + children = `0` (optional, integer) ... number of childs
    + infants = `0` (optional, integer) ... number of infants
    
    + flyDays  = `[0,1,2,3,4,5,6]` (optional, list) ... the list of days for the departure (0-Sunday)
        (url encoded format for all days flyDays%5B%5D=0&flyDays%5B%5D=1&flyDays%5B%5D=2&flyDays%5B%5D=3&flyDays%5B%5D=4&flyDays%5B%5D=5&flyDays%5B%5D=6)
        
    + onlyWorkingDays = `0` (optional, boolean) ... search flights with departure only on working days
    + onlyWeekends = `0` (optional, boolean) ... search flights with departure only on weekends 
    + directFlights = `0` (optional, boolean) ... search only for direct flights

    + partner = `picky` (optional, string) ... partner ID. If present, in the result will be also a link to a specific trip directly to skypicker.com, with the affiliate id included (use picky partner ID for testing)
    + v = `2` (optional, integer) ... api version, defaults to 1, in case of 2 the response format contains additional information (country codes and names, for now used only on skypicker.com frontend)
    
    + xml = `0` (optional, integer) ... returns an xml response instead of json
    + curr = `eur` (optional, string) ... use this parameter to change the currency in the response
    
    + locale = `en` (optional, string) ... the language of city names in the response
        (more translations to be added)
        + Values
            + `en`
            + `cs`
            + `pl`
            + `pt`
            + `it`
            + `de`
            + `fr`
            + `ru`
            + `hu`
            + `sk`
            + `el`
            + `fi`
            + `nl`
            + `se`


    + price_from = `1` (optional, integer) ... result filter, minimal price
    + price_to = `10000` (optional, integer) ... result filter, maximal price

    + dtimefrom = `00:00` (optional, string) ... result filter, min. departure time (11:00 means 11AM, 23:00 means 11PM, everyone of this time filter has the some format)
    + dtimeto = `00:00` (optional, string)  ... result filter, max departure time
    + atimefrom = `00:00` (optional, string)  ... result filter, min arrival time
    + atimeto = `00:00` (optional, string)  ... result filter, max arrival time
    + returndtimefrom = `00:00` (optional, string)  ... result filter, min dep. time of the returning flight
    + returndtimeto = `00:00` (optional, string)  ... result filter, max dep. time of the returning flight
    + returnatimefrom = `00:00` (optional, string)  ... result filter, min arrival time of the returning flight
    + returnatimeto = `00:00` (optional, string)  ... result filter, min arrival time of the returning flight
    + stopoverfrom = `00:00` (optional, string)  ... result filter, min length of stopover, 48:00 means 2 days here (48 hours)
    + stopoverto = `00:00` (optional, string)  ... result filter, max length of stopover, 48:00 means 2 days here (48 hours)

    + booking_token = `hashed data` (optional, string)  ... a hash containing the encrypted flight data. This hash should be passed to check flights and save booking API calls in the booking v2 API
    
    + offset = (optional, integer, `0`) ... enable pagination and set offset
    + limit = (optional, integer, `30`) ... limit number of results
    
    
+ Response 200 (application/json)

{
  "search_params": {
    "to_type": "airport",
    "flyFrom_type": "airport"
  },
  "time": 1,
  "connections": [],
  "currency": "pln",
  "currency_rate": 0.2353,
  

  "data": [
    {
      "mapIdfrom": "edinburgh",
      "return_duration": "10h 55m",
      "flyTo": "WMI",
      "conversion": {
        "PLN": 1154,
        "EUR": 271
      },
      "deep_link": "https://www.skypicker.com/deep?type=abc-m14.5&from=EDI&to=WMI&departure=19-12-2015&return=23-12-2015&flightsId=240466858|236557749|245258276|234220297&affilid=skyscanner_pl&price=271.5362&passengers=1&lang=pl&currency=pln&booking_token=NwyrOTUtH6wv4BdWZTvOrbnFTa5SOifCjnpGoAl4cKO2kB2HhT7afLhR/TDxb+eFu4YtIczyK0WbM+XCt51oGwDK7vohxDpNs2GE3fTG8FoBhxY59V7abVbbkEWcRIOXaJcmIZB1tq37mciGQWi4Sc29PEWEgFYVwxJYBIOJMNLYkB8FOhhUNMDmnaVNHDOgySMJd4it4r5fhopJczkKnJIKoMFEelHE0x5203/3dHkfA7iBk4/c1OYTA61XBIAlsCuTH4D0j0IHASTFV4VXT36kZS9oxvJuya4nyDoff2017Up/UHkaXQbNBAoD5W0A",
      "mapIdto": "warsaw",
      "nightsInDest": 3,
      "id": "240466858|236557749|245258276|234220297",
      "fly_duration": "24h 10m",
      "countryTo": {
        "code": "PL",
        "name": "Rzeczpospolita Polska"
      },
      "baglimit": {
        "hand_width": 40,
        "hand_length": 55,
        "hold_weight": 15,
        "hand_height": 20,
        "hand_weight": 10
      },
      "aTimeUTC": 1450643100,
      "distance": 1624.4,
      "price": 1154,
      "type_flights": [
        "lcc"
      ],
      "bags_price": {
        "1": 100.0,
        "2": 200.0
      },
      "cityTo": "Warszawa",
      "flyFrom": "EDI",
      "dTimeUTC": 1450556100,
      "p2": 232,
      "countryFrom": {
        "code": "GB",
        "name": "Zjednoczone Królestwo Wielkiej Brytanii"
      },
      "p1": 232,
      "dTime": 1450556100,
      "booking_token": "NwyrOTUtH6wv4BdWZTvOrbnFTa5SOifCjnpGoAl4cKO2kB2HhT7afLhR/TDxb+eFu4YtIczyK0WbM+XCt51oGwDK7vohxDpNs2GE3fTG8FoBhxY59V7abVbbkEWcRIOXaJcmIZB1tq37mciGQWi4Sc29PEWEgFYVwxJYBIOJMNLYkB8FOhhUNMDmnaVNHDOgySMJd4it4r5fhopJczkKnJIKoMFEelHE0x5203/3dHkfA7iBk4/c1OYTA61XBIAlsCuTH4D0j0IHASTFV4VXT36kZS9oxvJuya4nyDoff2017Up/UHkaXQbNBAoD5W0A",
      "cityFrom": "Edynburg",
      "aTime": 1450646700,
      
      "route": [
        {
          "bags_recheck_required": false,
          "aTimeUTC": 1450560300,
          "mapIdfrom": "edinburgh",
          "mapIdto": "dublin",
          "flight_no": 819,
          "dTime": 1450556100,
          "latTo": 53.3331,
          "flyTo": "DUB",
          "return": 0,
          "source": null,
          "id": "240466858",
          "airline": "FR",
          "lngTo": -6.24889,
          "cityTo": "Dublin",
          "cityFrom": "Edynburg",
          "lngFrom": -3.1936633587,
          "aTime": 1450560300,
          "flyFrom": "EDI",
          "price": 21.0,
          "latFrom": 55.9485946759,
          "dTimeUTC": 1450556100
        },
        {
          "bags_recheck_required": true,
          "aTimeUTC": 1450643100,
          "mapIdfrom": "dublin",
          "mapIdto": "warsaw",
          "flight_no": 4543,
          "dTime": 1450633200,
          "latTo": 52.2298,
          "flyTo": "WMI",
          "return": 0,
          "source": null,
          "id": "236557749",
          "airline": "FR",
          "lngTo": 21.0118,
          "cityTo": "Warszawa",
          "cityFrom": "Dublin",
          "lngFrom": -6.24889,
          "aTime": 1450646700,
          "flyFrom": "DUB",
          "price": 133.0,
          "latFrom": 53.3331,
          "dTimeUTC": 1450633200
        },
        {
          "bags_recheck_required": true,
          "aTimeUTC": 1450914900,
          "mapIdfrom": "warsaw",
          "mapIdto": "dublin",
          "flight_no": 4544,
          "dTime": 1450907400,
          "latTo": 53.3331,
          "flyTo": "DUB",
          "return": 1,
          "source": null,
          "id": "245258276",
          "airline": "FR",
          "lngTo": -6.24889,
          "cityTo": "Dublin",
          "cityFrom": "Warszawa",
          "lngFrom": 21.0118,
          "aTime": 1450914900,
          "flyFrom": "WMI",
          "price": 63.0,
          "latFrom": 52.2298,
          "dTimeUTC": 1450903800
        },
        {
          "bags_recheck_required": true,
          "aTimeUTC": 1450943100,
          "mapIdfrom": "dublin",
          "mapIdto": "edinburgh",
          "flight_no": 812,
          "dTime": 1450938600,
          "latTo": 55.9485946759,
          "flyTo": "EDI",
          "return": 1,
          "source": null,
          "id": "234220297",
          "airline": "FR",
          "lngTo": -3.1936633587,
          "cityTo": "Edynburg",
          "cityFrom": "Dublin",
          "lngFrom": -6.24889,
          "aTime": 1450943100,
          "flyFrom": "DUB",
          "price": 15.0,
          "latFrom": 53.3331,
          "dTimeUTC": 1450938600
        }
      ]
    },
 ]
}


# POST /flights_multi{partner,locale,curr}

    + partner (required, string,``) ... your partner ID
    + locale (optional, string,`en`) ... localization, if you are using it for flights
    + curr (optional, string,``) ... currency, if you are using it for flights
    
This call is able to do multi-city searches in parallel. The single search queries dont have to be connected in any way.

Accepts the same parameters as the /flights API call.

To do a request, send a POST json payload with a list of API parameters for each search query.

A sample python code for this call could look like the following (this is an example, all of the /flights parameters can be used)

```
import requests
import json

r = {"requests": [
         {"to": "PRG", "flyFrom": "AMS", "directFlights": 0, "dateFrom": "11/06/2015", "dateTo": "28/06/2015"},
         {"to": "AMS", "flyFrom": "OSL", "directFlights": 0, "dateFrom": "01/07/2015", "dateTo": "11/07/2015"}
]}

print requests.post('https://api.skypicker.com/flights_multi?partner=partnerID', data = json.dumps(r) ).json()
```

In the response root, the results field contains a list of responses for the posted queries. Each single element contains the same response as it would be a /flights API call.

Please keep in mind, that valid json quotes are only ", not '

Each result has its own deeplink which can be used to forward the user to Skypicker booking e.g. 
https://www.skypicker.com/deep?type=A&from=AMS&to=PRG&departure=28-06-2015&flightsId=225682230|227956401|226372190|226369315&affilid=picky&price=213.45&passengers=1&lang=en&booking_token=bcEuJfu3fWne+z+50B2d1FLlFWEq6njGjUEUpGFn1DvjlNr7ieM4H5cvU6x9XSmsOF3qfuD9WujYk8+45h72pV0Y0iQ3RYCY23jpAseZEWtKHdWd3k+oTdyMzC410kw0ZwqofGdUQ1LdbTvLvumLo7sFHpvlEh9mpmjKePCCBwGm5sI4cBE3Ys+/oLYuE3NXyGTJ2d1rHJpEdO8JnsEvPuFKpacVWlHBcbeh5wlmitEFW/6WGTL+dKmKl5rp1pEz
The total_price is the sum of all the prices.

The main_booking_token in the response root should be used for booking the flights, instead the booking_token in each single search query result.







# POST /zooz_payment{/booking_id,?token,?sandbox}

Makes a zooz transaction ( the implementation is done on frontend)

+ Parameters
    + booking_id (required, integer) ... the booking id you got from save_booking
    + token (required, string) ... the random string generated from the payment gateway used for payment (depends on the gateway)
    + sandbox (optional, bool) ... use sandbox for payment


+ Response 200

        {"status":"closed"}