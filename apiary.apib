FORMAT: 1A
HOST: https://api.skypicker.com

# Skypicker.com API
Skypicker.com flights search API.

The default api endpoint is api.skypicker.com . You have to use https, always.

To implement the basic search, you need only the /places and /flights API calls.

The places call contains the list of Skypicker API IDs, which are accepted by the /flights call in the flyFrom and to parameters. Basically, the IDs are the IATA airport and ISO country codes, 
but Skypicker uses also its own IDs as the engine can do very specific searches (currently anywhere and there could be other geo areas specified - "To the sea", "To party places" etc)


#### Places
The basic places call is this

https://api.skypicker.com/places

#### Search
The basic flights call could look like this

https://api.skypicker.com/flights?flyFrom=CZ&to=OPO&dateFrom=10/10/2014&dateTo=20/10/2014&partner=picky

If there is the partner parameter specified, the response will contain the link directly to Skypicker booking, where user can book the specified flight.

For more specific searches and filters continue to the apiary specification, where every available parameter is described.

# GET /places{/id,?term,?locale, ?zoomLevelThreshold, ?bounds,?v}

Returns the list of Skypicker api ids. This ids has to be used in the SP search (flights API call)
From v2 (May 2014) flights also accepts parameters for city areas (LON,PAR...), even if they dont appear in the places call

+ Parameters
    + id = `SK` (optional, string) ... if given, the call returns the details only for the one specific id
    + term = `br` (optional, string) ... used for suggestions of geo names,"br" returns city, airport codes or country names beginning with br
    + locale = `cs` (optional, string) ... the locale of geo names in response, default is en
    + zoomLevelThreshold = `3` (optional, integer) ... zoom level on which this place should be shown
    + bounds = `lat_lo,lng_lo,lat_hi,lng_hi` (optional, string) ... filter only places in these bounds. "lo" corresponds to the southwest corner of the bounding box, "hi" corresponds to the northeast corner of that box
    + v = 1 (optional, integer)  ... the api version, from v2 it returns the new api ids for the whole world.

+ Request
    { "term":"BRQ" }

+ Response 200
    {
        "zoomLevelThreshold": 7,
        "numberOfAirports": 1,
        "sp_score": null,
        "value": "Brno",
        "rank": 8,
        "parentId": 1,
        "lat": 49.1952,
        "lng": 16.608,
        "type": 0,
        "id": "BRQ"
    }


# GET /flights{flyFrom,to,datefrom,dateto,?longitudeFrom,?latitudeFrom,?radiusFrom,?longitudeFrom,?longitudeTo,?latitudeTo,?radiusTo,?daysInDestinationFrom,?daysInDestinationTo,?returnFrom,?returnTo,?typeFlight,?passengers,?flyDays,?oneforcity,?onlyWorkingDays,?onlyWeekends,?directFlights,?locale,?partner}

A single flights search.

The google flights like filters (price_from,price_to and the next ones) are not well documented and even not tested for properly functioning, yet. 

+ Parameters

    + flyFrom (required, string,`CZ`) ... Skypicker api id of the departure destination
    + to (required, string, `porto`) ... Skypicker api id of the arrival destination
    + datefrom (required, string,`08/02/2014`) ... search flights from this date (dd/mm/YYYY)
    + dateto (required, string,`08/03/2014`) ... search flights until this date (dd/mm/YYYY)

    + longitudeFrom = `14.0000` (optional, float) ... longitude of the pinpoint for geo based search, for the departure destination
    + latitudeFrom = `50.2000` (optional, float) ... lat of the pinpoint for geo based search, fot the departure destination
    + radiusFrom = `200` (optional, integer) ... search radius in km, max 250
        (radiusFrom works only with longitudeFrom and latitudeFrom. In this case, the **flyFrom** parameter is ignored)
        
    + longitudeTo = `14.0000` (optional, float) ... longitude of the pinpoint for geo based, for the arrival destination
    + latitudeTo = `50.2000` (optional, float) ... lat of the pinpoint for geo based search, for the arrival destination
    + radiusTo = `200` (optional, integer) ... search radius in km, max 250
        (radiusTo works only with longitudeTo and latitudeTo. In this case, the **to** parameter is ignored)
    
    + daysInDestinationFrom = `2` (optional, integer) ... the minimal length of stay in the destination given in the **to** parameter
    + daysInDestinationTo = `14` (optional, integer) ... the max length of stay in the destination given in the **to** parameter
        (use only one from the daysInDestination and returnFrom/returnTo parameters. If both of them are given, the API uses the daysInDest parameters
        and the return dates are ignored)
    
    + returnFrom = `08/03/2014` (optional, string) ... min return of the whole trip (dd/mm/YYYY)
    + returnTo = `08/04/2014` (optional, string) ... max return date of the whole trip (dd/mm/YYYY)
    
    + typeFlight = `oneway` (optional, string) ... switch for oneway/round flights search - will be deprecated in the near future
        (until then, you have to use the round parameter if one from the daysInDestination of returndate parameters is given.)
        
        + Values
            + `round`
            + `oneway`
            
    
    + oneforcity = `0` (optional, boolean) ... filters out the cheapest flights to every city covered by the **to** parameter
    
    + passengers = `1` (optional, integer) ... number of passengers
    
    + flyDays  = `[0,1,2,3,4,5,6]` (optional, list) ... the list of days for the departure (0-Sunday)
        (url encoded format for all days flyDays%5B%5D=0&flyDays%5B%5D=1&flyDays%5B%5D=2&flyDays%5B%5D=3&flyDays%5B%5D=4&flyDays%5B%5D=5&flyDays%5B%5D=6)
        
    + onlyWorkingDays = `0` (optional, boolean) ... search flights with departure only on working days
    + onlyWeekends = `0` (optional, boolean) ... search flights with departure only on weekends 
    + directFlights = `0` (optional, boolean) ... search only for direct flights

    + partner = `picky` (optional, string) ... partner ID. If present, in the result will be also a link to a specific trip directly to skypicker.com, with the affiliate id included (use picky partner ID for testing)
    + v = `2` (optional, integer) ... api version, defaults to 1, in case of 2 the response format contains additional information (country codes and names, for now used only on skypicker.com frontend)
    
    + locale = `en` (optional, string) ... the language of city names in the response
        (more translations to be added)
        + Values
            + `en`
            + `cs`
            + `pl`
            + `pt`
            + `it`
            + `de`
            + `fr`
            + `ru`
            + `hu`
            + `sk`
            + `el`


    + price_from = `1` (optional, integer) ... result filter, minimal price
    + price_to = `10000` (optional, integer) ... result filter, maximal price

    + dtimefrom = `00:00` (optional, string) ... result filter, min. departure time (11:00 means 11AM, 23:00 means 11PM, everyone of this time filter has the some format)
    + dtimeto = `00:00` (optional, string)  ... result filter, max departure time
    + atimefrom = `00:00` (optional, string)  ... result filter, min arrival time
    + atimeto = `00:00` (optional, string)  ... result filter, max arrival time
    + returndtimefrom = `00:00` (optional, string)  ... result filter, min dep. time of the returning flight
    + returndtimeto = `00:00` (optional, string)  ... result filter, max dep. time of the returning flight
    + returnatimefrom = `00:00` (optional, string)  ... result filter, min arrival time of the returning flight
    + returnatimeto = `00:00` (optional, string)  ... result filter, min arrival time of the returning flight
    + stopoverfrom = `00:00` (optional, string)  ... result filter, min length of stopover, 48:00 means 2 days here (48 hours)
    + stopoverto = `00:00` (optional, string)  ... result filter, max length of stopover, 48:00 means 2 days here (48 hours)
    
+ Response 200 (application/json)

        {
        "connections": [],
        "data": [
            {
            "aTimeUTC": 1394192700,
            "price": 134.96,
            "cityTo": "Porto",
            "flyFrom": "OSR",
            "flyTo": "OPO",
            "dTimeUTC": 1394132400,
            "nightsInDest": 11,
            "route": [
                    {
                    "aTimeUTC": 1394140200,
                    "mapIdfrom": "ostrava",
                    "mapIdto": "london",
                    "dTime": 1394136000,
                    "latTo": 51.5073356628,
                    "flyTo": "STN",
                    "return": 0,
                    "id": "8821821",
                    "airline": "FR",
                    "lngTo": -0.1276831031,
                    "cityTo": "Londýn",
                    "cityFrom": "Ostrava",
                    "lngFrom": 18.1110534668,
                    "aTime": 1394140200,
                    "flyFrom": "OSR",
                    "price": 23.4699993134,
                    "latFrom": 49.6962928772,
                    "dTimeUTC": 1394132400 
                    },
                    {
                    "aTimeUTC": 1394192700,
                    "mapIdfrom": "london",
                    "mapIdto": "porto",
                    "dTime": 1394184300,
                    "latTo": 41.2480545044,
                    "flyTo": "OPO",
                    "return": 0,
                    "id": "7709495",
                    "airline": "FR",
                    "lngTo": -8.681388855,
                    "cityTo": "Porto",
                    "cityFrom": "Londýn",
                    "lngFrom": -0.1276831031,
                    "aTime": 1394192700,
                    "flyFrom": "STN",
                    "price": 48.1599998474,
                    "latFrom": 51.5073356628,
                    "dTimeUTC": 1394184300
                    },
                    {
                    "aTimeUTC": 1395133200,
                    "mapIdfrom": "porto",
                    "mapIdto": "london",
                    "dTime": 1395124200,
                    "latTo": 51.5073356628,
                    "flyTo": "STN",
                    "return": 1,
                    "id": "7715638",
                    "airline": "FR",
                    "lngTo": -0.1276831031,
                    "cityTo": "Londýn",
                    "cityFrom": "Porto",
                    "lngFrom": -8.681388855,
                    "aTime": 1395133200,
                    "flyFrom": "OPO",
                    "price": 22.9899997711,
                    "latFrom": 41.2480545044,
                    "dTimeUTC": 1395124200
                    },
                    {
                    "aTimeUTC": 1395167700,
                    "mapIdfrom": "london",
                    "mapIdto": "ostrava",
                    "dTime": 1395159900,
                    "latTo": 49.6962928772,
                    "flyTo": "OSR",
                    "return": 1,
                    "id": "7711562",
                    "airline": "FR",
                    "lngTo": 18.1110534668,
                    "cityTo": "Ostrava",
                    "cityFrom": "Londýn",
                    "lngFrom": -0.1276831031,
                    "aTime": 1395171300,
                    "flyFrom": "STN",
                    "price": 20.4599990845,
                    "latFrom": 51.5073356628,
                    "dTimeUTC": 1395159900
                }
            ],
            "time": 1
            }]
        }



# GET /check_flights{/pnum,?bnum,?flights}

Checks the prices of given flights in realtime. Returns all the data about flights


## Basic SP booking flow (simplified)
1. call check_flights until flights_check is not True
2. watch for flights_invalid to be False (if this is going to be True, one or more of the flights doesnt exist anymore and the whole trip is unbookable)
3. if flights_check is True and flights_invalid is False, book the flight with the save_booking API call and pay for it with one of the payment options


## Flow used on frontend (as an working implementation example)


1. User opens the flight details, this could be done by a) clicking on "Book" in results b) accessing url that contains flight_id

2. Front-end calls /check_flight to get information about flight (not just check, as the name suggest, but all the information)

3. Front-end renders the Summary view about flight and booking form

4. Front-end repeatedly calls /check_flight (every 15s) and update Summary (price can change)... it also remembers flight_checked from last response

5. Front-end also manually calls /check_flight when user changes some important booking input (number of passengers, number of bags)


```
If front-end receives flight_invalid = true in any response, it will exit booking form.

flight_checked value is only for remembered, but not yet acted upon
```

## After the User clicks on "Book" button

1. Form validation happens, if everything is OK, go to next step, otherwise prompt user to check form

2. If last value of flight_check was false, wait for next response of /check_flight and try to repeat

3. Only if last response of /check_flight flight_checked was true, Front-end will send form to /save_booking back-end

4. Back-end should check price on its own and only return successful response if price was checked, if price cannot be checked, return error message (code 510)

5. If front-end will receive success from /save_booking, it will show payment options.

6. In the meantime, periodic /check_flight still occurs and if flight_invalid is sent from backend, booking is exited on front-end




+ Parameters
    + pnum = `1` (optional, integer) ... number of passengers
    + bnum = `0` (optional, integer) ... number of bags
    + flights (required, string) ... list of Skypicker flight IDs, separated by comma

+ Response 200

        {
            "flights_checked": false,
            "flights_invalid": false,
            
            "luggage": [56, 45, 25, 15, 20], 
            
            "fee_airline": 0.0, 
            "sp_fee": 24.01,
            "bags_fee": 0.0,
            "book_fee": 25.14,
            
            "flights_price": 190.98,
            "one_passenger": 240.13,
            "total": 240.13
            
            "server_time": 1395678524.0,
            
            "flights": [
                {
                    "id": 8996576,
                    
                    "price": 190.98,
                    "eur": 190.98,
                    "currency": "EUR",
                    
                    "atime": 1398525300.0,
                    "atime_utc": 1398518100.0, 
                    "atime_unix": 1398525300,
                    "dtime": 1398519900.0,
                    "dtime_utc": 1398512700.0,
                    "dtime_unix": 1398519900,
                    
                    "src": "CDG",
                    "src_name": "Paris",
                    "dst": "MXP",
                    "dst_name": "Milan",
                    
                    "airnum": 3, 
                    "scraping_start": 1395318317.0,
                    "invalid": null,
                    "checkin": 1395927900.0,
                    "fromid": 1382,
                    "check_ended": null,
                    "flydate": null,
                    "atime_waiting": null,
                    "flyuniquekey": "src:CDG_dst:MXP_dtime:2014-04-26 13:45:00_ar:U2",
                    "toid": 1524,
                    "time_between": null,
                    "disabled": null
                    
                    "timestamp": 1395539714.0,
                    
                    "airline": {
                        "id": 3,
                        "name": "easyJet", 
                        "Name": "easyJet"
                        "iata": "U2",
                        "iatacode": "U2",
                        "url": "http://www.easyjet.com",
                        
                        "checkin": 30,
                        
                        "hand_height": 25,
                        "hand_width": 45,
                        "hand_length": 56,
                        "hand_weight": 15,
                        
                        "hold_weight": 20,
                    },
                }
            ],
            
        } 





# POST /save_booking{/pnum,?bnum,?flights}

Saves the user data from the booking form and returns a booking id

The POST should contain the defined parameters in the following json
The response is same as for check_flights, only has booking_id added

```
{"lang":"en",
 "bags":1,
 "passengers":[
    {"surname":"Doe",
     "name":"John",
     "title":"mr",
     "cardno":"246543",
     "checkin":"passport",
     "birthday":1141430400,
     "expiration":1525132800,
     "nationality":"Czech Republic",
     "issuer":"Czech Republic",
     "email":"martin@skypicker.com",
     "phone":"123456786"}
 ],
 "price":66.33,
 "flights":["6111482"]}
```


+ Parameters
    + lang (required, string) ... the booking language
    + bags (required, string) ... the number of bags
    + price (required, integer) ... the booking price, which was accepted by user
    + flights (required, string) ... the list of flights IDs, separated by commas
    + passengers (required, integer) ... number of passengers


+ Response 200
    {
    "flights_price": 190.98,
    "fee_airline": 0.0, 
    "flights_invalid": false,
    "luggage": [56, 45, 25, 15, 20], 
    "flights_checked": false,
    "sp_fee": 24.01,
    "one_passenger": 240.13,
    "flights": [
        {"dtime_unix": 1398519900,
        "atime_unix": 1398525300,
        "airnum": 3,
        "dtime": 1398519900.0,
        "currency": "EUR",
        "id": 8996576,
        "atime_utc": 1398518100.0, 
        "scraping_start": 1395318317.0,
        "dst": "MXP",
        "invalid": null,
        "checkin": 1395927900.0,
        "fromid": 1382,
        "dtime_utc": 1398512700.0,
        "eur": 190.98,
        "check_ended": null,
        "timestamp": 1395539714.0,
        "price": 190.98,
        "flydate": null,
        "src_name": "Paris",
        "atime": 1398525300.0,
        "src": "CDG",
        "atime_waiting": null,
        "dst_name": "Milan",
        "flyuniquekey": "src:CDG_dst:MXP_dtime:2014-04-26 13:45:00_ar:U2",
        "toid": 1524,
        "time_between": null,
        "airline":
            {"hand_length": 56,
            "name": "easyJet", 
            "url": "http://www.easyjet.com",
            "checkin": 30,
            "iata": "U2",
            "iatacode": "U2",
            "hand_weight": 15,
            "hold_weight": 20,
            "hand_height": 25,
            "hand_width": 45,
            "id": 3,
            "Name": "easyJet"},
        "disabled": null}
        ],
        "bags_fee": 0.0,
        "server_time": 1395678524.0,
        "book_fee": 25.14,
        "total": 240.13,
        "booking_id": 1212}
}

# POST /paymill_payment{/booking_id,?token,?sandbox}

Makes a paymill transaction

+ Parameters
    + booking_id (required, integer) ... the booking id you got from save_booking
    + token (required, string) ... the random string generated from the payment gateway used for payment (depends on the gateway)
    + sandbox (optional, bool) ... use sandbox for payment

+ Response 200
    {"status":"closed"}

# POST /zooz_payment{/booking_id,?token,?sandbox}

Makes a zooz transaction ( the implementation is done on frontend)

+ Parameters
    + booking_id (required, integer) ... the booking id you got from save_booking
    + token (required, string) ... the random string generated from the payment gateway used for payment (depends on the gateway)
    + sandbox (optional, bool) ... use sandbox for payment


+ Response 200
    {"status":"closed"}
