FORMAT: 1A
HOST: https://api.skypicker.com

# Skypicker API

The Skypicker API can be used to search and book flight content, including
Skypicker's unique combinations.

## Summary

The API endpoint is api.skypicker.com. Use of HTTPS is required for all
requests, and
[SSLv3 handshakes are not accepted](https://en.wikipedia.org/wiki/POODLE).
Configure your client to use TLS 1.2 if you get a handshake error response.

There is no staging API for GET requests, feel free to use api.skypicker.com for
development. If you would like to make test bookings, please contact us at
b2b@skypicker.com.

To implement flight search functionality, you only need to use the /flights
call. In this case the customer will be redirected to skypicker.com to book the
flight if they select one of them

If you want to be able to book on behalf of your users, keeping them on your own
site or app during the whole process, you will also need to implement our
booking API, with the /check_flights and /save_booking endpoints.

The /places call allows you to get the list of Skypicker location API IDs, which
are accepted by the /flights call in the `flyFrom` and `to` parameters. This is
optional though, since you can use IATA airport codes or ISO country codes as
well.

## Limitations

Currently, our API has the following limitations:

 - We only return economy cabin class flight results.
 - We consider all passengers to be adults.

We're working on lifting these limitations as soon as we can.

# Group Places

## Places collection [/places{?term,?locale,?zoomLevelThreshold,?bounds,?v}]

### Get Places [GET]

+ Parameters

    + v: 3 (optional, integer) - API version to use. The current version is 3, so set this to `v=3`
    + term: br (optional, string) - The search term to get suggestions for. For instance, 'br' returns city, airport codes or country names beginning with 'Br', including Brussels, and Brazil.
    + locale: de (optional, string) - language of the names in the response
        + Default: `en`
    + bounds: -10.0,-10.0,10.0,10.0 (optional, string) - filter returned places to those within these bounds, specified in the format `lat_lo,lon_lo,lat_hi,lon_hi`. 'lo' is the southwestern corner of the bounding box, and 'hi' is the northeastern one.

+ Response 200

    + Body

            [
              {
                "zoomLevelThreshold": 7,
                "numberOfAirports": 1,
                "sp_score": null,
                "value": "Brno",
                "rank": 8,
                "parentId": 1,
                "lat": 49.1952,
                "lng": 16.608,
                "type": 0,
                "id": "BRQ"
              }
            ]

## Place [/places/{id}{?v,?locale}]

+ Parameters

    + id: BRQ (string)
    + locale: de (optional, string) - language of the names in the response
        + Default: `en`
    + v: 3 (optional, integer) - API version to use. The current version is 3, so set this to `v=3`

### Retrieve a Place [GET]

+ Response 200

    + Body

            {
              "zoomLevelThreshold": 7,
              "numberOfAirports": 1,
              "sp_score": null,
              "value": "Brno",
              "rank": 8,
              "parentId": 1,
              "lat": 49.1952,
              "lng": 16.608,
              "type": 0,
              "id": "BRQ"
            }

#### Search
The basic flights call could look like this

https://api.skypicker.com/flights?flyFrom=CZ&to=OPO&dateFrom=10/10/2014&dateTo=20/10/2014&partner=picky

If there is the partner parameter specified, the response will contain the link directly to Skypicker booking, where user can book the specified flight.

For more specific searches and filters continue to this apiary specification, where every available parameter is described.

Use the parameter partner=picky for testing your implementation. Before going live, your account manager will assign your custom partner ID to you.

## Group flights

A single flights search.

The google flights like filters (price_from,price_to and the next ones) are not well documented and even not tested for properly functioning, yet.


### GET /flights{flyFrom,to,datefrom,dateto,?longitudeFrom,?latitudeFrom,?radiusFrom,?longitudeFrom,?longitudeTo,?latitudeTo,?radiusTo,?daysInDestinationFrom,?daysInDestinationTo,?returnFrom,?returnTo,?typeFlight,?passengers,?flyDays,?oneforcity,?onlyWorkingDays,?onlyWeekends,?directFlights,?locale,?partner,?limit,?offset}


+ Parameters

    + flyFrom (required, string,`CZ`) ... Skypicker api id of the departure destination. Accepts the list of airport codes, city ID, two letter country code or metropolitan coded. For multicity search enter any number of values separated by comma. E.g. LON - checks every airport in London, LHR - checks flights from London Heathrow, UK - flights from United Kingdom
    + to (optional, string, `porto`) ... Skypicker api id of the arrival destination. Can also accept a list of airport codes separated by a comma for multicity search. E.g. BRQ,PRG,BTS,BUD. If you don't include any value you'll get results for all the airports in the world.
    + dateFrom (required, string,`08/02/2016`) ... search flights from this date (dd/mm/YYYY). **Use parameters dateFrom and dateTo as a daterange for the flight departure.**
        Parameter dateFrom 01/05/2016 and dateTo 30/05/2016 means, that the departure can be anytime between those dates.
        For the dates of the return flights, use the returnTo&returnFrom or daysInDestinationFrom & daysInDestinationTo parameters
    + dateTo (required, string,`08/03/2016`) ... search flights until this date (dd/mm/YYYY)

    + longitudeFrom : 14.0000 (optional, float) - longitude of the pinpoint for geo based search, for the departure destination
    + latitudeFrom : 50.2000 (optional, float) - lat of the pinpoint for geo based search, fot the departure destination
    + radiusFrom : 200 (optional, integer) - search radius in km, max 250
        (radiusFrom works only with longitudeFrom and latitudeFrom. In this case, the **flyFrom** parameter is ignored)

    + longitudeTo : 14.0000 (optional, float) - longitude of the pinpoint for geo based, for the arrival destination
    + latitudeTo : 50.2000 (optional, float) - lat of the pinpoint for geo based search, for the arrival destination
    + radiusTo : 200 (optional, integer) - search radius in km, max 250
        (radiusTo works only with longitudeTo and latitudeTo. In this case, the **to** parameter is ignored)

    + daysInDestinationFrom : 2 (optional, integer) - the minimal length of stay in the destination given in the **to** parameter. Counts nights, not days
    + daysInDestinationTo : 14 (optional, integer) - the max length of stay in the destination given in the **to** parameter
        (use only one from the daysInDestination and returnFrom/returnTo parameters. If both of them are given, the API uses the daysInDest parameters
        and the return dates are ignored). When you omit one of these two params, the default value for daysInDestinationFrom is 1 and for daysInDestinationTo is 14.

    + returnFrom : 08/02/2016 (optional, string) - min return of the whole trip (dd/mm/YYYY)
    + returnTo : 08/02/2016 (optional, string) - max return date of the whole trip (dd/mm/YYYY)

    + typeFlight (optional, string, `oneway`) ... switch for oneway/round flights search - will be deprecated in the near future
        (until then, you have to use the round parameter if one from the daysInDestination of returndate parameters is given.)

        + Values
            + `round`
            + `oneway`


    + oneforcity : 0 (optional, boolean) - filters out the cheapest flights to every city covered by the **to** parameter
    + one_per_date : 0 (optional, boolean) - filters out the cheapest flights for one date. Can be 0 or not included, or one of these two params can be set to 1

    + passengers : 1 (optional, integer) - number of passengers. Default for defining the num of passengers.

    + adults : 1 (optional, integer) - To specify number of adults, children, and infants, you can use adults&children&infants parameters. You have to specify all of those 3 parameters, otherwise the parameter passengers will be used. However, currently childs&infants are considered as adults in our search engine and are not reqiured, default adults value is 1
    + children : 0 (optional, integer) - number of children
    + infants : 0 (optional, integer) - number of infants

    + flyDays  : [0,1,2,3,4,5,6] (optional, list) - the list of days for the departure (0-Sunday)
        (url encoded format for all days flyDays%5B%5D=0&flyDays%5B%5D=1&flyDays%5B%5D=2&flyDays%5B%5D=3&flyDays%5B%5D=4&flyDays%5B%5D=5&flyDays%5B%5D=6)

    + onlyWorkingDays : 0 (optional, boolean) - search flights with departure only on working days
    + onlyWeekends : 0 (optional, boolean) - search flights with departure only on weekends
    + directFlights : 0 (optional, boolean) - search only for direct flights, can be set to 0 or 1, 0 is default

    + partner : picky (required, string) - partner ID. If present, in the result will be also a link to a specific trip directly to skypicker.com, with the affiliate id included (use picky partner ID for testing)
    + v : 2 (optional, integer) - api version, defaults to 1, in case of 2 the response format contains additional information (country codes and names, for now used only on skypicker.com frontend)

    + xml : 0 (optional, integer) - returns an xml response instead of json
    + curr (optional, string, `EUR`) ... use this parameter to change the currency in the response

        + Values
            + `AED`
            + `AFN`
            + `ALL`
            + `AMD`
            + `ANG`
            + `AOA`
            + `ARS`
            + `AUD`
            + `AWG`
            + `AZN`
            + `BAM`
            + `BBD`
            + `BDT`
            + `BGN`
            + `BHD`
            + `BIF`
            + `BMD`
            + `BND`
            + `BOB`
            + `BRL`
            + `BSD`
            + `BTC`
            + `BTN`
            + `BWP`
            + `BYR`
            + `BZD`
            + `CAD`
            + `CDF`
            + `CHF`
            + `CLF`
            + `CLP`
            + `CNY`
            + `COP`
            + `CRC`
            + `CUC`
            + `CUP`
            + `CVE`
            + `CZK`
            + `DJF`
            + `DKK`
            + `DOP`
            + `DZD`
            + `EEK`
            + `EGP`
            + `ERN`
            + `ETB`
            + `EUR`
            + `FJD`
            + `FKP`
            + `GBP`
            + `GEL`
            + `GGP`
            + `GHS`
            + `GIP`
            + `GMD`
            + `GNF`
            + `GTQ`
            + `GYD`
            + `HKD`
            + `HNL`
            + `HRK`
            + `HTG`
            + `HUF`
            + `IDR`
            + `ILS`
            + `IMP`
            + `INR`
            + `IQD`
            + `IRR`
            + `ISK`
            + `JEP`
            + `JMD``
            + `JOD`
            + `JPY`
            + `KES`
            + `KGS`
            + `KHR`
            + `KMF`
            + `KPW`
            + `KRW`
            + `KWD`
            + `KYD`
            + `KZT`
            + `LAK`
            + `LBP`
            + `LKR`
            + `LRD`
            + `LSL`
            + `LTL`
            + `LVL`
            + `LYD`
            + `MAD`
            + `MDL`
            + `MGA`
            + `MKD`
            + `MMK`
            + `MNT`
            + `MOP`
            + `MRO`
            + `MTL`
            + `MUR`
            + `MVR`
            + `MWK`
            + `MXN`
            + `MYR`
            + `MZN`
            + `NAD`
            + `NGN`
            + `NIO`
            + `NOK`
            + `NPR`
            + `NZD`
            + `OMR`
            + `PAB`
            + `PEN`
            + `PGK`
            + `PHP`
            + `PKR`
            + `PLN`
            + `PYG`
            + `QAR`
            + `QUN`
            + `RON`
            + `RSD`
            + `RUB`
            + `RWF`
            + `SAR`
            + `SBD`
            + `SCR`
            + `SDG`
            + `SEK`
            + `SGD`
            + `SHP`
            + `SLL`
            + `SOS`
            + `SRD`
            + `STD`
            + `SVC`
            + `SYP``
            + `SZL`
            + `THB`
            + `TJS`
            + `TMT`
            + `TND`
            + `TOP`
            + `TRY`
            + `TTD`
            + `TWD`
            + `TZS`
            + `UAH`
            + `UGX`
            + `USD`
            + `UYU`
            + `UZS`
            + `VEF`
            + `VND`
            + `VUV`
            + `WST`
            + `XAF`
            + `XAG`
            + `XAU`
            + `XCD`
            + `XDR`
            + `XOF`
            + `XPD`
            + `XPF`
            + `XPT`
            + `YER`
            + `ZAR`
            + `ZMK`
            + `ZMW`
            + `ZWL`



    + locale (optional, string, `en`) ... the language of city names in the response
        (more translations to be added)
        + Values
            + `en`
            + `cs`
            + `pl`
            + `pt`
            + `it`
            + `de`
            + `fr`
            + `ru`
            + `hu`
            + `sk`
            + `el`
            + `fi`
            + `nl`
            + `se`


    + price_from : 1 (optional, integer) - result filter, minimal price
    + price_to : 10000 (optional, integer) - result filter, maximal price

    + dtimefrom : 00:00 (optional, string) - result filter, min. departure time (11:00 means 11AM, 23:00 means 11PM, everyone of this time filter has the some format)
    + dtimeto : 00:00 (optional, string)  - result filter, max departure time
    + atimefrom : 00:00 (optional, string) - result filter, min arrival time
    + atimeto : 00:00 (optional, string)  - result filter, max arrival time
    + returndtimefrom : 00:00 (optional, string) - result filter, min dep. time of the returning flight
    + returndtimeto : 00:00 (optional, string) - result filter, max dep. time of the returning flight
    + returnatimefrom : 00:00 (optional, string) - result filter, min arrival time of the returning flight
    + returnatimeto : 00:00 (optional, string) - result filter, min arrival time of the returning flight
    + stopoverfrom : 00:00 (optional, string) - result filter, min length of stopover, 48:00 means 2 days here (48 hours)
    + stopoverto : 00:00 (optional, string) - result filter, max length of stopover, 48:00 means 2 days here (48 hours)

    + booking_token : hashed data (optional, string) - a hash containing the encrypted flight data. This hash should be passed to check flights and save booking API calls in the booking v2 API

    + offset : 0 (optional, integer) - enable pagination and set offset
    + limit : 30 (optional, integer) - limit number of results, max is 200
    + sort : price (optional, string) - sorts the results by quality, price, date or duration. Price is the default value
    + asc : 1 (optional, integer) - can be set to 1 or 0, default is 1 - from cheapest flights to the most expensive



+ Response 200 (application/json)

{
  "search_params": {
    "to_type": "airport",
    "flyFrom_type": "airport"
  },
  "time": 1,
  "connections": [],
  "currency": "pln",
  "currency_rate": 0.2353,


  "data": [
    {
      "mapIdfrom": "edinburgh",
      "return_duration": "10h 55m",
      "flyTo": "WMI",
      "conversion": {
        "PLN": 1154,
        "EUR": 271
      },
      "deep_link": "https://www.skypicker.com/deep?type=abc-m14.5&from=EDI&to=WMI&departure=19-12-2015&return=23-12-2015&flightsId=240466858|236557749|245258276|234220297&affilid=skyscanner_pl&price=271.5362&passengers=1&lang=pl&currency=pln&booking_token=NwyrOTUtH6wv4BdWZTvOrbnFTa5SOifCjnpGoAl4cKO2kB2HhT7afLhR/TDxb+eFu4YtIczyK0WbM+XCt51oGwDK7vohxDpNs2GE3fTG8FoBhxY59V7abVbbkEWcRIOXaJcmIZB1tq37mciGQWi4Sc29PEWEgFYVwxJYBIOJMNLYkB8FOhhUNMDmnaVNHDOgySMJd4it4r5fhopJczkKnJIKoMFEelHE0x5203/3dHkfA7iBk4/c1OYTA61XBIAlsCuTH4D0j0IHASTFV4VXT36kZS9oxvJuya4nyDoff2017Up/UHkaXQbNBAoD5W0A",
      "mapIdto": "warsaw",
      "nightsInDest": 3,
      "id": "240466858|236557749|245258276|234220297",
      "fly_duration": "24h 10m",
      "countryTo": {
        "code": "PL",
        "name": "Rzeczpospolita Polska"
      },
      "baglimit": {
        "hand_width": 40,
        "hand_length": 55,
        "hold_weight": 15,
        "hand_height": 20,
        "hand_weight": 10
      },
      "aTimeUTC": 1450643100,
      "distance": 1624.4,
      "price": 1154,
      "type_flights": [
        "lcc"
      ],
      "bags_price": {
        "1": 100.0,
        "2": 200.0
      },
      "cityTo": "Warszawa",
      "flyFrom": "EDI",
      "dTimeUTC": 1450556100,
      "p2": 232,
      "countryFrom": {
        "code": "GB",
        "name": "Zjednoczone Królestwo Wielkiej Brytanii"
      },
      "p1": 232,
      "dTime": 1450556100,
      "booking_token": "NwyrOTUtH6wv4BdWZTvOrbnFTa5SOifCjnpGoAl4cKO2kB2HhT7afLhR/TDxb+eFu4YtIczyK0WbM+XCt51oGwDK7vohxDpNs2GE3fTG8FoBhxY59V7abVbbkEWcRIOXaJcmIZB1tq37mciGQWi4Sc29PEWEgFYVwxJYBIOJMNLYkB8FOhhUNMDmnaVNHDOgySMJd4it4r5fhopJczkKnJIKoMFEelHE0x5203/3dHkfA7iBk4/c1OYTA61XBIAlsCuTH4D0j0IHASTFV4VXT36kZS9oxvJuya4nyDoff2017Up/UHkaXQbNBAoD5W0A",
      "cityFrom": "Edynburg",
      "aTime": 1450646700,

      "route": [
        {
          "bags_recheck_required": false,
          "aTimeUTC": 1450560300,
          "mapIdfrom": "edinburgh",
          "mapIdto": "dublin",
          "flight_no": 819,
          "dTime": 1450556100,
          "latTo": 53.3331,
          "flyTo": "DUB",
          "return": 0,
          "source": null,
          "id": "240466858",
          "airline": "FR",
          "lngTo": -6.24889,
          "cityTo": "Dublin",
          "cityFrom": "Edynburg",
          "lngFrom": -3.1936633587,
          "aTime": 1450560300,
          "flyFrom": "EDI",
          "price": 21.0,
          "latFrom": 55.9485946759,
          "dTimeUTC": 1450556100
        },
        {
          "bags_recheck_required": true,
          "aTimeUTC": 1450643100,
          "mapIdfrom": "dublin",
          "mapIdto": "warsaw",
          "flight_no": 4543,
          "dTime": 1450633200,
          "latTo": 52.2298,
          "flyTo": "WMI",
          "return": 0,
          "source": null,
          "id": "236557749",
          "airline": "FR",
          "lngTo": 21.0118,
          "cityTo": "Warszawa",
          "cityFrom": "Dublin",
          "lngFrom": -6.24889,
          "aTime": 1450646700,
          "flyFrom": "DUB",
          "price": 133.0,
          "latFrom": 53.3331,
          "dTimeUTC": 1450633200
        },
        {
          "bags_recheck_required": true,
          "aTimeUTC": 1450914900,
          "mapIdfrom": "warsaw",
          "mapIdto": "dublin",
          "flight_no": 4544,
          "dTime": 1450907400,
          "latTo": 53.3331,
          "flyTo": "DUB",
          "return": 1,
          "source": null,
          "id": "245258276",
          "airline": "FR",
          "lngTo": -6.24889,
          "cityTo": "Dublin",
          "cityFrom": "Warszawa",
          "lngFrom": 21.0118,
          "aTime": 1450914900,
          "flyFrom": "WMI",
          "price": 63.0,
          "latFrom": 52.2298,
          "dTimeUTC": 1450903800
        },
        {
          "bags_recheck_required": true,
          "aTimeUTC": 1450943100,
          "mapIdfrom": "dublin",
          "mapIdto": "edinburgh",
          "flight_no": 812,
          "dTime": 1450938600,
          "latTo": 55.9485946759,
          "flyTo": "EDI",
          "return": 1,
          "source": null,
          "id": "234220297",
          "airline": "FR",
          "lngTo": -3.1936633587,
          "cityTo": "Edynburg",
          "cityFrom": "Dublin",
          "lngFrom": -6.24889,
          "aTime": 1450943100,
          "flyFrom": "DUB",
          "price": 15.0,
          "latFrom": 53.3331,
          "dTimeUTC": 1450938600
        }
      ]
    },
 ]
}

## Group flights_multi

This call is able to do multi-city searches in parallel. The single search queries dont have to be connected in any way.

Accepts the same parameters as the /flights API call.

To do a request, send a POST json payload with a list of API parameters for each search query.

A sample python code for this call could look like the following (this is an example, all of the /flights parameters can be used)


In the response root, the results field contains a list of responses for the posted queries. Each single element contains the same response as it would be a /flights API call.

Please keep in mind, that valid json quotes are only ", not '

Each result has its own deeplink which can be used to forward the user to Skypicker booking e.g.
https://www.skypicker.com/deep?type=default&from=PRG&to=LHR&departure=14-06-2016&flightsId=272290790|272398486&affilid=picky&price=85.6174&passengers=1&lang=en&currency=GBP&booking_token=GamFTRHoBQ/v6QB8IrykhpoVGKB0KA6sVANbFz24Dyu3VGSgdrTrERd1E37H1zyFanlCQ5r1TTITv0H1r6jb1+jf5mRmiovpeHu/p9bJBO/tWZyhvtLncCZG+OX6XbsbSmhJbUxVk8AZzELMsVlItcR9B1OWa0H9lhS6Oa+P0KKTIj3q8VgcJvBcXM7v6RARbJT+fojtCrBYUTKuEVnJTwezq2f1ICqEJnd7T4Yjl3S1LeK6j4nNNXv5lyf+c+HPRyYsFKDOstpjtc6U7VF4tyVOgKo7+A69ofFjM3WpycOEx5wfovufn2dk1HY3fByAvt/yDySZBcBSmvxqfhbRzwALAw/jSoWbpbVZpHTMzvRH03k4hDip096IUO8Fzv8T

The total_price is the sum of all the prices.

The main_booking_token in the response root should be used for booking the flights, instead the booking_token in each single search query result.

### POST /flights_multi{?partner,?locale,?curr}

+ Parameters
    + partner : `picky` (required, string) - your partner ID
    + locale : `en` (optional, string) - localization, if you are using it for flights
    + curr : `GBP` (optional, string) - currency, if you are using it for flights


+ Request (application/json)
    {
        import requests
        import json

        r = {"requests": [
                {"to": "PRG", "flyFrom": "AMS", "directFlights": 0, "dateFrom": "11/06/2016", "dateTo": "28/06/2016"},
                {"to": "AMS", "flyFrom": "OSL", "directFlights": 0, "dateFrom": "01/07/2016", "dateTo": "11/07/2016"}
        ]}

        print requests.post('https://api.skypicker.com/flights_multi?partner=partnerID', data = json.dumps(r) ).json()
    }


## Group check_flights

Please see our booking documentation http://docs.skypickerbookingapi1.apiary.io/#reference/check-flights

## Group save_booking

Please refer to our documentation on save_booking http://docs.skypickerbookingapi1.apiary.io/#reference/save-booking

## Group zooz_payment

Makes a zooz transaction (the implementation is done on frontend)

### POST /zooz_payment{/booking_id,?token,?sandbox}

+ Parameters
    + booking_id (required, integer) ... the booking id you got from save_booking
    + token (required, string) ... the random string generated from the payment gateway used for payment (depends on the gateway)
    + sandbox (optional, bool) ... use sandbox for payment


+ Response 200

        {"status":"closed"}
